
set(LLVM_PATH ${LLVM_DIR})
link_directories(${LLVM_PATH}/lib)
include_directories(${LLVM_PATH}/include)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti -std=c++20")


set(LLVM_INCLUDE_BENCHMARKS OFF)
set(LLVM_INCLUDE_TESTS OFF)
set(LLVM_TARGETS_TO_BUILD host )
set(LLVM_EXPERIMENTAL_TARGETS_TO_BUILD SPIRV)
set(LLVM_BUILD_INSTRUMENTED_COVERAGE OFF)
set(LLVM_BUILD_TYPE "Release")

if (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/llvm/_build)
	file( DOWNLOAD "https://github.com/llvm/llvm-project/releases/download/llvmorg-${MLIR_VERSION}/llvm-${MLIR_VERSION}.src.tar.xz"  ${CMAKE_CURRENT_SOURCE_DIR}/llvm-${MLIR_VERSION}.tar.xz
		STATUS DOWNLOAD_STATUS )		
	message(STATUS " LLVM Download status: ${DOWNLOAD_STATUS}")	
	
	file(ARCHIVE_EXTRACT INPUT ${CMAKE_CURRENT_SOURCE_DIR}/llvm-${MLIR_VERSION}.tar.xz DESTINATION ${CMAKE_CURRENT_SOURCE_DIR})
	file(REMOVE ${CMAKE_CURRENT_SOURCE_DIR}/llvm-${MLIR_VERSION}.tar.xz)
	message(STATUS " LLVM Extraction done")
	
	file(RENAME ${CMAKE_CURRENT_SOURCE_DIR}/llvm-${MLIR_VERSION}.src ${CMAKE_CURRENT_SOURCE_DIR}/llvm NO_REPLACE)
	file(REMOVE_RECURSE ${CMAKE_CURRENT_SOURCE_DIR}/llvm-${MLIR_VERSION}.src)
	file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/llvm/_build)
	file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/llvm/_install)
	message(STATUS " LLVM file processing done")
endif()

if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/llvm/_install/lib/cmake/llvm)
	execute_process(COMMAND ${CMAKE_COMMAND} -G ${CMAKE_GENERATOR} ${CMAKE_CURRENT_SOURCE_DIR}/llvm -DLLVM_INCLUDE_BENCHMARKS=OFF -DLLVM_BUILD_RUNTIMES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_TARGETS_TO_BUILD=host -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=SPIRV -DLLVM_BUILD_INSTRUMENTED_COVERAGE=OFF -DCMAKE_INSTALL_PREFIX=${CMAKE_CURRENT_SOURCE_DIR}/llvm/_install
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/llvm/_build
	)
	execute_process(COMMAND ${CMAKE_COMMAND} --build . --target install --parallel WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/llvm/_build)

	message(STATUS " LLVM Building done")
endif()

